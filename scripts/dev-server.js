import path from 'path';
import mime from 'mime';
import chalk from 'chalk';
import webpack from 'webpack';
import WebpackDevServer from 'webpack-dev-server';

import * as config from '../config';
import webpack_config from './webpack.dev.config';

// Create dev-server
const server = new WebpackDevServer(webpack(webpack_config, (err, stats) => {
  if (err) {
    console.info(chalk.white.bgRed(  '              BUILD FAILED               '));
    console.error(err);
  } else {
    console.info(chalk.white.bgGreen('        SERVER STARTED ON PORT %s        '), config.dev_server.port);
  }
}), {
  hot: true,
  lazy: false,
  // quiet: true,
  // noInfo: true,
  stats: {
    colors: true,
    cached: true,
    cachedAssets: true
  },
  historyApiFallback: true,
  contentBase: webpack_config.output.path,
  publicPath: webpack_config.output.publicPath
});

// Enable simple request log
server.use(require('morgan')('dev'));

// Resolve and serve index.html and favicon.ico generated by HtmlWebpackPlugin
server.use((req, res, next) => {
  const sendFile = fp => {
    const { fileSystem } = server.middleware;
    const filename = path.resolve(webpack_config.output.path, fp);
    const content = fileSystem.readFileSync(filename);
    const type = mime.lookup(filename);
    const charset = mime.charsets.lookup(type);
    res.setHeader('Content-Type', type + (charset ? '; charset=' + charset : ''));
    res.setHeader('Content-Length', content.length);
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.send(content);
  };
  switch (req.url) {
    case '/index.html':
      sendFile(config.path.html);
      break;
    case '/favicon.ico':
      sendFile(config.path.favicon);
      break;
    default:
      next();
  }
});

// Start dev-server
server.listen(config.dev_server);
